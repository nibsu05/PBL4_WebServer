@model PBL3.DTO.Buyer.ExchangeStuffDTO
@using PBL3.Enums;
@{
    ViewData["Title"] = "Chi ti·∫øt y√™u c·∫ßu ƒë·ªïi/tr·∫£";
    Layout = "~/Views/Shared/BuyerLayout.cshtml";
     string GetStatusBadge(PBL3.Enums.ExchangeStatus status)
    {
        return status switch
        {
            PBL3.Enums.ExchangeStatus.WaitConfirm => "üïí Ch·ªù x·ª≠ l√Ω",
            PBL3.Enums.ExchangeStatus.Approved => "‚úÖ ƒê√£ ch·∫•p nh·∫≠n",
            PBL3.Enums.ExchangeStatus.Rejected => "‚ùå B·ªã t·ª´ ch·ªëi",
            _ => "Kh√¥ng x√°c ƒë·ªãnh"
        };
    }

    string GetStatusColor(PBL3.Enums.ExchangeStatus status)
    {
        return status switch
        {
            PBL3.Enums.ExchangeStatus.WaitConfirm => "bg-yellow-100 text-yellow-700",
            PBL3.Enums.ExchangeStatus.Approved => "bg-green-100 text-green-700",
            PBL3.Enums.ExchangeStatus.Rejected => "bg-red-100 text-red-700",
            _ => "bg-gray-100 text-gray-600"
        };
    }
}

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<style>
    .theme-green-text { color: #219150; }
    .theme-green-bg { background-color: #219150; color: #fff; }
    .section-box {
        background-color: #f9fafb;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #e5e7eb;
    }
    .product-image { width: 100px; height: 100px; object-fit: cover; border-radius: 0.5rem; }
</style>

<div class="flex gap-6">
    <div class="w-1/5 pr-4 border-r border-gray-200">
        @Html.Partial("~/Views/Shared/_BuyerMenuLayout.cshtml")
    </div>

    <div class="flex-1 p-6 bg-white rounded-lg shadow-md">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-semibold theme-green-text">Chi ti·∫øt y√™u c·∫ßu ƒë·ªïi / tr·∫£ #@Model.ReturnExchangeId</h2>
            <span class="px-3 py-1 rounded-full font-semibold text-sm @(GetStatusColor(Model.Status))">
                @GetStatusBadge(Model.Status)
            </span>
        </div>
        <!-- Ph·∫ßn ng∆∞·ªùi g·ª≠i / ng∆∞·ªùi nh·∫≠n -->
        <div class="grid grid-cols-2 gap-4 mb-6">
            <div class="section-box">
                <h3 class="font-semibold mb-2">Y√™u c·∫ßu t·ª´:</h3>
                <p><strong>@Model.BuyerName</strong></p>
                <p>Ng√†y g·ª≠i y√™u c·∫ßu: @Model.RequestDate.ToString("dd/MM/yyyy HH:mm")</p>
            </div>
            <div class="section-box">
                <h3 class="font-semibold mb-2">G·ª≠i ƒë·∫øn:</h3>
                <p><strong>@Model.SellerStoreName</strong></p>
                @if (Model.ResponseDate != null)
                {
                    if (Model.ResponseDate.Date == new DateTime(2001, 1, 1))
                    {
                        <p>Ph·∫£n h·ªìi: Ch∆∞a ph·∫£n h·ªìi</p>
                    }
                    else
                    {
                        <p>Ph·∫£n h·ªìi: @Model.ResponseDate.ToString("dd/MM/yyyy HH:mm")</p>
                    }
                }
                else
                {
                    <p>Ph·∫£n h·ªìi: Ch∆∞a ph·∫£n h·ªìi</p>
                }
            </div>
        </div>

        <!-- Th·∫ª ch√≠nh n·ªôi dung -->
        <div class="bg-gray-50 p-6 rounded-lg border space-y-6">

            <!-- Th√¥ng tin s·∫£n ph·∫©m -->
            <div class="flex gap-6 items-center">
                <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.ProductImage)" 
                alt="·∫¢nh s·∫£n ph·∫©m" 
                class="product-image border" />
                <div class="flex flex-col space-y-1">
                    <p class="font-semibold text-lg">@Model.ProductName</p>
                    <p>M√£ s·∫£n ph·∫©m: @Model.ProductId</p>
                    <p>S·ªë l∆∞·ª£ng y√™u c·∫ßu: <strong>@Model.Quantity</strong></p>
                    <p>M√£ ƒë∆°n h√†ng: #@Model.OrderId</p>
                </div>
            </div>

            <hr />

            <!-- L√Ω do -->
            <div>
                <h3 class="font-semibold mb-2">L√Ω do ƒë·ªïi / tr·∫£:</h3>
                <p class="text-gray-700">@Model.Reason</p>
            </div>

            <hr />

            <!-- ·∫¢nh minh ch·ª©ng -->
            <div>
                <h3 class="font-semibold mb-2">·∫¢nh minh ch·ª©ng:</h3>
                @if (Model.Image != null && Model.Image.Length > 0)
                {
                    var base64Image = Convert.ToBase64String(Model.Image);
                    var imageSrc = $"data:image/png;base64,{base64Image}";
                    <img src="@imageSrc" alt="·∫¢nh minh ch·ª©ng" class="h-80 w-auto mx-auto rounded border" />
                }
                else
                {
                    <img src="https://via.placeholder.com/200x150?text=No+Image" alt="Placeholder" class="h-80 w-auto mx-auto rounded border" />
                }
            </div>
            @if (Model.Status == ExchangeStatus.Rejected)
            {
                <div class="mt-4 p-4 border border-red-300 bg-red-50 text-red-800 rounded">
                    Y√™u c·∫ßu ƒë·ªïi/ tr·∫£ c·ªßa b·∫°n ƒë√£ <strong>b·ªã t·ª´ ch·ªëi</strong>. H√£y li√™n h·ªá v·ªõi ƒë∆°n v·ªã kinh doanh th√¥ng qua email <strong>@Model.SellerEmail</strong> ho·∫∑c s·ªë ƒëi·ªán tho·∫°i: <strong>@Model.SellerPhone</strong> ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt.
                </div>
            }
            else if (Model.Status == ExchangeStatus.Approved)
            {
                <div class="mt-4 p-4 border border-green-300 bg-green-50 text-green-800 rounded">
                    Y√™u c·∫ßu ƒë·ªïi/ tr·∫£ c·ªßa b·∫°n ƒë√£ <strong>ƒë∆∞·ª£c ch·∫•p nh·∫≠n</strong>. ƒê∆°n h√†ng s·∫Ω ƒë·∫øn tay b·∫°n trong th·ªùi gian s·ªõm nh·∫•t. H√£y li√™n h·ªá v·ªõi ƒë∆°n v·ªã kinh doanh qua email <strong>@Model.SellerEmail</strong> ho·∫∑c s·ªë ƒëi·ªán tho·∫°i: <strong>@Model.SellerPhone</strong> n·∫øu c·∫ßn th√™m h·ªó tr·ª£.
                </div>
            }
        </div>
    </div>
</div>
